// netlify/functions/chatboot.js
// Files Coaching â€” Chatbot IA only (FR by default, EN on request).
// No canned replies: everything is generated by the LLM,
// with strict safeguards: NO full workouts, NO nutrition/recipes.
// If user asks those â†’ redirect to the questionnaire URL below.

const QUESTIONNAIRE_URL = " questionnaire.files-coaching.com ";

const low  = (s) => (s || "").toLowerCase();
const any  = (t, arr) => arr.some(k => t.includes(k));
const isEmpty = (v) => !v || !String(v).trim();

// --- simple language detection: default FR, switch to EN if clear English cues
function detectLang(msg) {
  const t = low(msg);
  if (any(t, [
    "english", "in english", "answer in english", "hey", "hello", "hi",
    "workout", "training", "price", "cost", "meal", "diet", "food", "help", "please"
  ])) return "en";
  return "fr";
}

// --- intents that must be redirected (no generation)
const BLOCK_KEYS = {
  fr: {
    workout: ["sÃ©ance", "seance", "programme", "exercice", "exos", "plan d'entraÃ®nement", "plan d entrainement", "routine", "planning", "workout", "programme complet", "sÃ©ance complÃ¨te", "seance complete"],
    nutrition: ["nutrition", "recette", "recettes", "repas", "plan nutrition", "plan alimentaire", "alimentation", "macro", "calorie", "protÃ©ine", "proteine", "glucide", "lipide", "menu"]
  },
  en: {
    workout: ["workout plan", "full workout", "session plan", "program", "routine", "training plan", "complete session", "complete program", "exercises plan"],
    nutrition: ["nutrition plan", "meal plan", "diet plan", "exact macros", "recipes", "recipe", "calories", "protein", "carbs", "fats", "menu"]
  }
};

// --- redirection text (short, AI-like tone but fixed policy message)
function redirectReply(lang, topic) {
  if (lang === "en") {
    const label = topic === "nutrition" ? "nutrition" : "workouts";
    return `For tailored ${label}, please use the questionnaire ðŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">Access form</a>.`;
  }
  // FR
  const label = topic === "nutrition" ? "nutrition" : "sÃ©ances";
  return `Pour du ${label} sur mesure, passe par le questionnaire ðŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s</a>.`;
}

// --- OpenAI call (Chat Completions)
async function callLLM({ userMessage, lang }) {
  const apiKey = process.env.OPENAI_API_KEY;
  const model  = process.env.OPENAI_MODEL || "gpt-4o-mini";
  const base   = process.env.OPENAI_BASE_URL || "https://api.openai.com/v1";
  if (!apiKey) throw new Error("Missing OPENAI_API_KEY");

  const system = (lang === "en")
    ? [
        "You are Files, a helpful fitness assistant for files-coaching.com.",
        "NEVER provide full workouts, routines, or complete training programs.",
        "NEVER provide exact nutrition plans, recipes, or exact macros/calories.",
        `If the user asks for those, tell them to use the questionnaire: ${QUESTIONNAIRE_URL}.`,
        "Keep answers concise (1â€“3 sentences), friendly, and actionable.",
        "You may help with site navigation and general guidance."
      ].join("\n")
    : [
        "Tu es Files, un assistant de coaching sportif pour files-coaching.com.",
        "NE DONNE JAMAIS de sÃ©ances complÃ¨tes, routines ou programmes d'entraÃ®nement complets.",
        "NE DONNE JAMAIS de plans nutrition prÃ©cis, de recettes exactes ni de macros/calories exactes.",
        `Si l'utilisateur le demande, redirige-le vers le questionnaire : ${QUESTIONNAIRE_URL}.`,
        "RÃ©ponds de faÃ§on concise (1â€“3 phrases), amicale et utile.",
        "Tu peux aider Ã  la navigation du site et donner des conseils gÃ©nÃ©raux."
      ].join("\n");

  const res = await fetch(`${base}/chat/completions`, {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model,
      messages: [
        { role: "system", content: system },
        { role: "user", content: userMessage }
      ],
      temperature: 0.6
    })
  });

  if (!res.ok) {
    const t = await res.text().catch(() => "");
    throw new Error(`LLM ${res.status}: ${t.slice(0,200)}`);
  }
  const json = await res.json();
  const out = json.choices?.[0]?.message?.content?.trim();
  return out || (lang === "en" ? "Iâ€™m not sure I understood." : "Je ne suis pas sÃ»r dâ€™avoir compris.");
}

// --- final safety: if the model tries to output restricted content, replace by redirect
function safetyPostFilter(text, lang) {
  const bad = /(full (workout|program)|sÃ©ance complÃ¨te|programme complet|meal plan|nutrition plan|exact (macros?|calories)|recettes?\b)/i;
  if (bad.test(text)) {
    const topic = /(meal plan|nutrition|recette|recipes?)/i.test(text) ? "nutrition" : "workout";
    return redirectReply(lang, topic);
  }
  return text;
}

exports.handler = async (event) => {
  // --- CORS headers (ok pour tests locaux; restreins Ã  ton domaine en prod)
  const CORS = {
    "Access-Control-Allow-Origin": "*", // ex: "https://files-coaching.netlify.app"
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Allow-Methods": "POST, GET, OPTIONS"
  };
  const headers = { "Content-Type": "application/json", ...CORS };

  try {
    // Preflight & health
    if (event.httpMethod === "GET") {
      return { statusCode: 200, headers, body: JSON.stringify({ ok: true, reply: "AI ready âœ…" }) };
    }
    if (event.httpMethod === "OPTIONS") {
      return { statusCode: 200, headers, body: "" };
    }

    // Parse input
const body = event.body ? JSON.parse(event.body) : {};
const message = String(body.message || "").trim();
const lang = body.lang || detectLang(message); // ðŸ‘ˆ prioritÃ© Ã  la langue envoyÃ©e par le front
if (isEmpty(message)) {
  return { statusCode: 200, headers, body: JSON.stringify({ reply: "Dis-moi quelque chose ðŸ™‚ / Say something ðŸ™‚", lang }) };
}

    // AI generation
    let ai = await callLLM({ userMessage: message, lang });
    try {
  const payload = {
    created_at: new Date().toISOString(),
    lang,
    user: message,
    ai
  };

  fetch(process.env.N8N_WEBHOOK_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  }).catch(() => {});
} catch (e) {
  console.error("n8n log error:", e);
}
// Safety post-filter
    ai = safetyPostFilter(ai, lang);

    return { statusCode: 200, headers, body: JSON.stringify({ reply: ai, lang }) };
  } catch (e) {
    console.error("chatboot error:", e);
    const lang = "fr";
    const reply = `Je peux tâ€™aider Ã  naviguer ou te rediriger vers le questionnaire ðŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s</a>.`;
    // Renvoie 200 pour Ã©viter d'afficher une erreur cÃ´tÃ© UI
    return { statusCode: 200, headers, body: JSON.stringify({ reply, lang }) };
  }
};

