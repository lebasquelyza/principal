// netlify/functions/chatboot.js
const QUESTIONNAIRE_URL = "https://files-coaching.com/questionnaire.html";
const CONTACT_EMAIL     = "sportifandpro@gmail.com";

const low = (s) => (s || "").toLowerCase();
const any = (t, arr) => arr.some(k => t.includes(k));
const pick = (arr) => arr[Math.floor(Math.random()*arr.length)];

const K = {
  hello: ["bonjour","salut","coucou","hello","yo"],
  form:  ["questionnaire","formulaire","accÃ¨s","acces","inscription"],
  bug:   ["bug","erreur","problÃ¨me","probleme","marche pas","bloquÃ©","bloquee","bloque","je n'arrive pas","je narrive pas"],
  price: ["prix","tarif","abonnement","payer","paiement","combien","â‚¬","euro"],
  train: ["sÃ©ance","seance","exercice","exos","programme","entrain","workout","routine","planning","plan d'entraÃ®nement","plan d entrainement"],
  food:  ["nutrition","recette","repas","manger","alimentation","macro","calorie","calories","protÃ©ine","proteine","glucide","lipide"],
  gear:  ["matÃ©riel","materiel","Ã©quipement","equipement","haltÃ¨re","barre","Ã©lastique","tapis","chaussure","chaussures"],
  recover:["rÃ©cup","recup","sommeil","Ã©tirement","etirement","stretch","courbature","hydratation"],
  motivate:["motivation","dÃ©marrer","demarrer","commencer","reprise","reprendre","rÃ©gularitÃ©","regularite","discipline"]
};

const R = {
  hello: [
    "Salut ğŸ‘‹ PrÃªt(e) Ã  avancer ?",
    "Hey ğŸ’ª comment puis-je tâ€™aider aujourdâ€™hui ?",
    "Coucou ğŸ‘‹ Besoin dâ€™infos ou dâ€™un coup de main sur le site ?"
  ],
  toFormTrain: [
    `Pour des sÃ©ances/exercices adaptÃ©s, passe par le questionnaire ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Le mieux pour un programme sur mesure : le questionnaire ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Je te redirige vers le questionnaire pour un plan personnalisÃ© ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`
  ],
  toFormFood: [
    `Je ne fournis pas de plan/recettes exactes ici ğŸ˜‰ Pour du personnalisÃ© : <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Pas de nutrition dÃ©taillÃ©e dans le chat. On le fait aprÃ¨s questionnaire ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Pour une alimentation au cordeau, passe dâ€™abord par le questionnaire ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`
  ],
  toFormPrice: [
    `Les tarifs dÃ©pendent de tes objectifs. Oriente-toi via le questionnaire ğŸ‘‰ <a href="${QUESTIONNAIRENAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `On personnalise aussi le budget. Dâ€™abord le questionnaire, et on te dit tout ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`
  ],
  siteHelp: [
    `Besoin dâ€™aide sur le site ? Dis-moi ce qui bloque et je te guide âœ‹`,
    `Tu peux accÃ©der au questionnaire ici : <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Pour nous Ã©crire : <a href="mailto:${CONTACT_EMAIL}">${CONTACT_EMAIL}</a>.`
  ],
  bug: [
    `Oups ğŸ˜… dis-moi oÃ¹ Ã§a bloque et je tâ€™accompagne. Essaie aussi dâ€™actualiser (âŒ˜â‡§R).`,
    `Je tâ€™aide ! Tu peux aussi aller directement au formulaire : <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">questionnaire</a>.`
  ],
  gear: [
    "CÃ´tÃ© matÃ©riel, fais simple : haltÃ¨res rÃ©glables + Ã©lastiques couvrent 90% des besoins.",
    "Pas de matos ? On peut travailler au poids du corps. Pour un plan prÃ©cis â†’ questionnaire ğŸ˜‰"
  ],
  recover: [
    "Priorise le sommeil (7â€“9h) + hydratation + 5â€“10 min dâ€™Ã©tirements lÃ©gers post-sÃ©ance.",
    "RÃ©cup simple : sommeil rÃ©gulier, eau, marche lÃ©gÃ¨re. Pour un plan complet â†’ questionnaire."
  ],
  motivate: [
    "Fixe un objectif clair + 3 crÃ©neaux fixes/semaine. Petit pas > grand discours ğŸ˜‰",
    "Commence court (20â€“30 min), rÃ©pÃ¨te. La rÃ©gularitÃ© fait 80% du job ğŸ’ª"
  ],
  fallback: [
    `Je peux tâ€™aider Ã  naviguer sur le site, ou te rediriger vers le questionnaire pour un suivi personnalisÃ© ğŸ‘‰ <a href="${QUESTIONNAIRE_URL}" target="_blank" rel="noopener">AccÃ¨s au questionnaire</a>.`,
    `Tu veux des infos, de lâ€™aide ou tâ€™orienter ? Je suis lÃ  ğŸ™‚`
  ]
};

function detect(msg) {
  if (any(msg, K.hello))     return "hello";
  if (any(msg, K.form))      return "form";
  if (any(msg, K.bug))       return "bug";
  if (any(msg, K.price))     return "price";
  if (any(msg, K.train))     return "train";
  if (any(msg, K.food))      return "food";
  if (any(msg, K.gear))      return "gear";
  if (any(msg, K.recover))   return "recover";
  if (any(msg, K.motivate))  return "motivate";
  return "other";
}

function respond(msg) {
  const intent = detect(msg);
  switch (intent) {
    case "hello":
      return { reply: pick(R.hello), suggestions: ["AccÃ©der au questionnaire","Aide navigation","Contacter lâ€™Ã©quipe"] };
    case "form":
      return { reply: pick(R.siteHelp) };
    case "bug":
      return { reply: pick(R.bug), suggestions: ["AccÃ©der au questionnaire","Contacter lâ€™Ã©quipe"] };
    case "price":
      return { reply: pick(R.toFormPrice) }; // jamais de prix ici
    case "train":
      return { reply: pick(R.toFormTrain), suggestions: ["Objectif perte de poids","Objectif prise de masse"] }; // jamais de sÃ©ance complÃ¨te
    case "food":
      return { reply: pick(R.toFormFood), suggestions: ["AccÃ©der au questionnaire","Contacter lâ€™Ã©quipe"] }; // jamais de nutrition prÃ©cise
    case "gear":
      return { reply: pick(R.gear) };
    case "recover":
      return { reply: pick(R.recover) };
    case "motivate":
      return { reply: pick(R.motivate) };
    default:
      return { reply: pick(R.fallback), suggestions: ["AccÃ©der au questionnaire","Aide navigation"] };
  }
}

exports.handler = async (event) => {
  try {
    const headers = { "Content-Type": "application/json" };
    if (event.httpMethod === "GET") {
      return { statusCode: 200, headers, body: JSON.stringify({ reply: pick(R.hello) }) };
    }
    if (event.httpMethod === "OPTIONS") {
      return { statusCode: 200, headers, body: "" };
    }
    const body = JSON.parse(event.body || "{}");
    const message = String(body.message || "").trim();
    if (!message) return { statusCode: 200, headers, body: JSON.stringify({ reply: "Dis-moi ce dont tu as besoin ğŸ™‚" }) };
    const out = respond(low(message));
    return { statusCode: 200, headers, body: JSON.stringify(out) };
  } catch (e) {
    console.error(e);
    return { statusCode: 500, body: JSON.stringify({ error: "server_error" }) };
  }
};
